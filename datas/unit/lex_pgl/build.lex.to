PGLA_PRODUCT_IDENT package
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT main
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_IDENT import
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_STRING "fmt"
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_STRING "os"
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_STRING "sort"
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_STRING "strings"
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_STRING "unicode"
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_STRING "github.com/ProtossGenius/SureMoonNet/basis/smn_file"
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_IDENT func
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT check
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_IDENT err
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT error
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL {
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT if
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT err
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL !=
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT nil
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL {
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT panic
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_IDENT err
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SYMBOL }
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SYMBOL }
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_IDENT type
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT RuneList
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL [
PGLA_PRODUCT_SYMBOL ]
PGLA_PRODUCT_IDENT rune
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_COMMENT // Len is the number of elements in the collection.
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_IDENT func
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_IDENT r
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT RuneList
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT Len
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT int
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL {
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT return
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT len
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_IDENT r
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SYMBOL }
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_COMMENT // Less reports whether the element with
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_COMMENT // index i should sort before the element with index j.
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_IDENT func
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_IDENT r
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT RuneList
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT Less
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_IDENT i
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT int
PGLA_PRODUCT_SYMBOL ,
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT j
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT int
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT bool
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL {
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT return
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT r
PGLA_PRODUCT_SYMBOL [
PGLA_PRODUCT_IDENT i
PGLA_PRODUCT_SYMBOL ]
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL <
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT r
PGLA_PRODUCT_SYMBOL [
PGLA_PRODUCT_IDENT j
PGLA_PRODUCT_SYMBOL ]
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SYMBOL }
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_COMMENT // Swap swaps the elements with indexes i and j.
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_IDENT func
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_IDENT r
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT RuneList
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT Swap
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_IDENT i
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT int
PGLA_PRODUCT_SYMBOL ,
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT j
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT int
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL {
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT r
PGLA_PRODUCT_SYMBOL [
PGLA_PRODUCT_IDENT i
PGLA_PRODUCT_SYMBOL ]
PGLA_PRODUCT_SYMBOL ,
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT r
PGLA_PRODUCT_SYMBOL [
PGLA_PRODUCT_IDENT j
PGLA_PRODUCT_SYMBOL ]
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL =
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT r
PGLA_PRODUCT_SYMBOL [
PGLA_PRODUCT_IDENT j
PGLA_PRODUCT_SYMBOL ]
PGLA_PRODUCT_SYMBOL ,
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT r
PGLA_PRODUCT_SYMBOL [
PGLA_PRODUCT_IDENT i
PGLA_PRODUCT_SYMBOL ]
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SYMBOL }
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_IDENT var
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT LexCfgVarsFile
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL *
PGLA_PRODUCT_IDENT os
PGLA_PRODUCT_SYMBOL .
PGLA_PRODUCT_IDENT File
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_IDENT func
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT SymbolVarCfg
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL {
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT fmt
PGLA_PRODUCT_SYMBOL .
PGLA_PRODUCT_IDENT Println
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_STRING "[start]read symbol list from file and write to code"
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT defer
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT fmt
PGLA_PRODUCT_SYMBOL .
PGLA_PRODUCT_IDENT Println
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_STRING "[end]read symbol list from file and write to code"
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT datas
PGLA_PRODUCT_SYMBOL ,
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT err
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL :
PGLA_PRODUCT_SYMBOL =
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT smn_file
PGLA_PRODUCT_SYMBOL .
PGLA_PRODUCT_IDENT FileReadAll
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_STRING "./datas/analysis/pgl_ana_lex/symbol.cfg"
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT check
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_IDENT err
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT charMap
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL :
PGLA_PRODUCT_SYMBOL =
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT map
PGLA_PRODUCT_SYMBOL [
PGLA_PRODUCT_IDENT rune
PGLA_PRODUCT_SYMBOL ]
PGLA_PRODUCT_IDENT bool
PGLA_PRODUCT_SYMBOL {
PGLA_PRODUCT_SYMBOL }
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT writecv
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_STRING `package pgl_ana_lex\n\nvar SymbolList = map[string]bool{`
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT smbList
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL :
PGLA_PRODUCT_SYMBOL =
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT strings
PGLA_PRODUCT_SYMBOL .
PGLA_PRODUCT_IDENT Split
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_IDENT string
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_IDENT datas
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SYMBOL ,
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_STRING "\\n"
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT for
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT i
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL :
PGLA_PRODUCT_SYMBOL =
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT range
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT smbList
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL {
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT smbList
PGLA_PRODUCT_SYMBOL [
PGLA_PRODUCT_IDENT i
PGLA_PRODUCT_SYMBOL ]
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL =
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT strings
PGLA_PRODUCT_SYMBOL .
PGLA_PRODUCT_IDENT TrimSpace
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_IDENT smbList
PGLA_PRODUCT_SYMBOL [
PGLA_PRODUCT_IDENT i
PGLA_PRODUCT_SYMBOL ]
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT smbList
PGLA_PRODUCT_SYMBOL [
PGLA_PRODUCT_IDENT i
PGLA_PRODUCT_SYMBOL ]
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL =
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT strings
PGLA_PRODUCT_SYMBOL .
PGLA_PRODUCT_IDENT Replace
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_IDENT smbList
PGLA_PRODUCT_SYMBOL [
PGLA_PRODUCT_IDENT i
PGLA_PRODUCT_SYMBOL ]
PGLA_PRODUCT_SYMBOL ,
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_STRING "\\\\"
PGLA_PRODUCT_SYMBOL ,
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_STRING "\\\\\\\\"
PGLA_PRODUCT_SYMBOL ,
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL -
PGLA_PRODUCT_INTERGER 1
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT line
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL :
PGLA_PRODUCT_SYMBOL =
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT smbList
PGLA_PRODUCT_SYMBOL [
PGLA_PRODUCT_IDENT i
PGLA_PRODUCT_SYMBOL ]
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT if
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT line
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL ==
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_STRING ""
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL {
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT continue
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SYMBOL }
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT for
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT _
PGLA_PRODUCT_SYMBOL ,
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT char
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL :
PGLA_PRODUCT_SYMBOL =
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT range
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT line
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL {
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT charMap
PGLA_PRODUCT_SYMBOL [
PGLA_PRODUCT_IDENT char
PGLA_PRODUCT_SYMBOL ]
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL =
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT true
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SYMBOL }
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT writecvf
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_STRING "\\"%s\\":true,"
PGLA_PRODUCT_SYMBOL ,
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT line
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SYMBOL }
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT charList
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL :
PGLA_PRODUCT_SYMBOL =
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT make
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_IDENT RuneList
PGLA_PRODUCT_SYMBOL ,
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_INTERGER 0
PGLA_PRODUCT_SYMBOL ,
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT len
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_IDENT charMap
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT for
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT char
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL :
PGLA_PRODUCT_SYMBOL =
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT range
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT charMap
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL {
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT charList
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL =
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT append
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_IDENT charList
PGLA_PRODUCT_SYMBOL ,
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT char
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SYMBOL }
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT sort
PGLA_PRODUCT_SYMBOL .
PGLA_PRODUCT_IDENT Sort
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_IDENT charList
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT writecv
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_STRING `}\n\nvar SymbolCharSet = map[rune]bool{`
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT for
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT _
PGLA_PRODUCT_SYMBOL ,
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT char
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL :
PGLA_PRODUCT_SYMBOL =
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT range
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT charList
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL {
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT if
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT char
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL ==
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_STRING '\\\\'
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL {
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT writecvf
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_STRING `'\\\\':true,`
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SYMBOL }
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT else
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL {
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT writecvf
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_STRING "'%c':true,"
PGLA_PRODUCT_SYMBOL ,
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT char
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SYMBOL }
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SYMBOL }
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT ccMap
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL :
PGLA_PRODUCT_SYMBOL =
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT map
PGLA_PRODUCT_SYMBOL [
PGLA_PRODUCT_IDENT string
PGLA_PRODUCT_SYMBOL ]
PGLA_PRODUCT_IDENT bool
PGLA_PRODUCT_SYMBOL {
PGLA_PRODUCT_STRING ""
PGLA_PRODUCT_SYMBOL :
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT true
PGLA_PRODUCT_SYMBOL }
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT writecv
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_STRING `}\n\nvar SymbolCanContinue = map[string]bool{`
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT for
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT _
PGLA_PRODUCT_SYMBOL ,
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT c1
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL :
PGLA_PRODUCT_SYMBOL =
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT range
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT smbList
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL {
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT for
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT _
PGLA_PRODUCT_SYMBOL ,
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT c2
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL :
PGLA_PRODUCT_SYMBOL =
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT range
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT smbList
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL {
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT if
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT ccMap
PGLA_PRODUCT_SYMBOL [
PGLA_PRODUCT_IDENT c2
PGLA_PRODUCT_SYMBOL ]
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL ||
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT c1
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL ==
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT c2
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL {
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT continue
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SYMBOL }
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT if
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT strings
PGLA_PRODUCT_SYMBOL .
PGLA_PRODUCT_IDENT HasPrefix
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_IDENT c1
PGLA_PRODUCT_SYMBOL ,
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT c2
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL {
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT writecvf
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_STRING "\\"%s\\":true, "
PGLA_PRODUCT_SYMBOL ,
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT c2
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT ccMap
PGLA_PRODUCT_SYMBOL [
PGLA_PRODUCT_IDENT c2
PGLA_PRODUCT_SYMBOL ]
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL =
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT true
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SYMBOL }
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SYMBOL }
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SYMBOL }
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT writecv
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_STRING `}\n\n//some maybe define in another type, but not as symbol. like comment's "//" and "/*"\nvar SymbolUnuse = map[string]bool{"//":true, "/*":true}\n`
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SYMBOL }
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_IDENT func
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT NumberVarCfg
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL {
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT fmt
PGLA_PRODUCT_SYMBOL .
PGLA_PRODUCT_IDENT Println
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_STRING "[start]read Number Charset and write to code "
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT defer
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT fmt
PGLA_PRODUCT_SYMBOL .
PGLA_PRODUCT_IDENT Println
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_STRING "[start]read Number Charset and write to code "
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT datas
PGLA_PRODUCT_SYMBOL ,
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT err
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL :
PGLA_PRODUCT_SYMBOL =
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT smn_file
PGLA_PRODUCT_SYMBOL .
PGLA_PRODUCT_IDENT FileReadAll
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_STRING "./datas/analysis/pgl_ana_lex/number.cfg"
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT check
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_IDENT err
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT writecv
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_STRING `\n//number charSet\nvar NumberCharSet = map[rune]bool{`
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT for
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT _
PGLA_PRODUCT_SYMBOL ,
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT char
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL :
PGLA_PRODUCT_SYMBOL =
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT range
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT string
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_IDENT datas
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL {
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT if
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT unicode
PGLA_PRODUCT_SYMBOL .
PGLA_PRODUCT_IDENT IsSpace
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_IDENT char
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL {
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT continue
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SYMBOL }
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT writecvf
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_STRING `'%c':true, `
PGLA_PRODUCT_SYMBOL ,
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT char
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_SYMBOL }
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT writecv
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_STRING `}\n`
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SYMBOL }
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_IDENT func
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT writecv
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_IDENT str
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT string
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL {
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT _
PGLA_PRODUCT_SYMBOL ,
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT err
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL :
PGLA_PRODUCT_SYMBOL =
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT LexCfgVarsFile
PGLA_PRODUCT_SYMBOL .
PGLA_PRODUCT_IDENT WriteString
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_IDENT str
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT check
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_IDENT err
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SYMBOL }
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_IDENT func
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT writecvf
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_IDENT format
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT string
PGLA_PRODUCT_SYMBOL ,
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT a
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL .
PGLA_PRODUCT_SYMBOL .
PGLA_PRODUCT_SYMBOL .
PGLA_PRODUCT_IDENT interface
PGLA_PRODUCT_SYMBOL {
PGLA_PRODUCT_SYMBOL }
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL {
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT writecv
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_IDENT fmt
PGLA_PRODUCT_SYMBOL .
PGLA_PRODUCT_IDENT Sprintf
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_IDENT format
PGLA_PRODUCT_SYMBOL ,
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT a
PGLA_PRODUCT_SYMBOL .
PGLA_PRODUCT_SYMBOL .
PGLA_PRODUCT_SYMBOL .
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SYMBOL }
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_IDENT func
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT main
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL {
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT var
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT err
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT error
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT LexCfgVarsFile
PGLA_PRODUCT_SYMBOL ,
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT err
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_SYMBOL =
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT smn_file
PGLA_PRODUCT_SYMBOL .
PGLA_PRODUCT_IDENT CreateNewFile
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_STRING "./analysis/pgl_ana_lex/cfg_vars.go"
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT defer
PGLA_PRODUCT_SPACE  
PGLA_PRODUCT_IDENT LexCfgVarsFile
PGLA_PRODUCT_SYMBOL .
PGLA_PRODUCT_IDENT Close
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT check
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_IDENT err
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT fmt
PGLA_PRODUCT_SYMBOL .
PGLA_PRODUCT_IDENT Println
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_STRING "$$$$$$$$$$$$$$$$$$$ start build project $$$$$$$$$$$$$$$$$$$$$"
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_COMMENT //read symbol list from file and write to code
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT SymbolVarCfg
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT NumberVarCfg
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SPACE 	
PGLA_PRODUCT_IDENT fmt
PGLA_PRODUCT_SYMBOL .
PGLA_PRODUCT_IDENT Println
PGLA_PRODUCT_SYMBOL (
PGLA_PRODUCT_STRING "SUCCESS"
PGLA_PRODUCT_SYMBOL )
PGLA_PRODUCT_SPACE \n
PGLA_PRODUCT_SYMBOL }
PGLA_PRODUCT_SPACE \n
EMD end
